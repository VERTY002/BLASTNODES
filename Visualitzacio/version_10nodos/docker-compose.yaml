version: "3.9"

volumes: #ESTO LO PONEMOS POR SI BORRAMOS LOS CONTENEDORES NO PERDER LA INFO QUE HAY DENTRO DE ELLOS
  grafana-data:   #GUARDA LA CONFIGURACION DE GRAFANA 
  prometheus-data:    #GUARDA LAS METRICAS QUE PROMETEUS RECOLECTA
services:
  node1:
    build: .
    image: app_pae
    hostname: node1
    environment:
      - PORT=5000
      - PEERS=node2:5000
      - DESTINOS=node8
      - ROUTES=
    volumes:
      - ./app.py:/app/app.py
    networks:
      - red_p2p

  node2:
    build: .
    image: app_pae
    hostname: node2
    environment:
      - PORT=5000
      - PEERS=node1:5000,node4:5000,node6:5000,node5:5000,node10:5000
      - DESTINOS=node7
      - ROUTES=node3:node4:5000,node8:node6:5000,node9:node5:5000,node7:node6:5000
    volumes:
      - ./app.py:/app/app.py
    networks:
      - red_p2p

  node3:
    build: .
    image: app_pae
    hostname: node3
    environment:
      - PORT=5000
      - PEERS=node4:5000,node6:5000
      - DESTINOS=
      - ROUTES=
    volumes:
      - ./app.py:/app/app.py
    networks:
      - red_p2p

  node4:
    build: .
    image: app_pae
    hostname: node4
    environment:
      - PORT=5000
      - PEERS=node3:5000,node2:5000
      - DESTINOS=
      - ROUTES=
    volumes:
      - ./app.py:/app/app.py
    networks:
      - red_p2p

  node5:
    build: .
    image: app_pae
    hostname: node5
    environment:
      - PORT=5000
      - PEERS=node2:5000,node9:5000,node6:5000
      - DESTINOS=
      - ROUTES=node10:node9:5000,node1:node2:5000,node4:node2:5000,node3:node6:5000,node7:node9:5000,node8:node6:5000
    volumes:
      - ./app.py:/app/app.py
    networks:
      - red_p2p  

  node6:
    build: .
    image: app_pae
    hostname: node6
    environment:
      - PORT=5000
      - PEERS=node2:5000,node3:5000,node5:5000,node7:5000,node8:5000
      - DESTINOS=
      - ROUTES=node9:node5:5000,node10:node2:5000,node1:node2:5000,node4:node3:5000
    volumes:
      - ./app.py:/app/app.py
    networks:
      - red_p2p

  node7:
    build: .
    image: app_pae
    hostname: node7
    environment:
      - PORT=5000
      - PEERS=node6:5000,node8:5000,node9:5000
      - DESTINOS=
      - ROUTES=node1:node6:5000,node2:node6:5000,node3:node6:5000,node4:node6:5000,node5:node9:5000,node10:node9:5000
    volumes:
      - ./app.py:/app/app.py
    networks:
      - red_p2p

  node8:
    build: .
    image: app_pae
    hostname: node8
    environment:
      - PORT=5000
      - PEERS=node7:5000,node6:5000
      - DESTINOS=
      - ROUTES=
    volumes:
      - ./app.py:/app/app.py
    networks:
      - red_p2p

  node9:
    build: .
    image: app_pae
    hostname: node9
    environment:
      - PORT=5000
      - PEERS=node10:5000,node5:5000,node7:5000
      - DESTINOS=node4
      - ROUTES=node1:node10:5000,node2:node5:5000,node3:node5:5000,node4:node5:5000,node6:node7:5000,node8:node7:5000
    volumes:
      - ./app.py:/app/app.py
    networks:
      - red_p2p
  
  node10:
    build: .
    image: app_pae
    hostname: node10
    environment:
      - PORT=5000
      - PEERS=node2:5000,node9:5000
      - DESTINOS=
      - ROUTES=
    volumes:
      - ./app.py:/app/app.py
    networks:
      - red_p2p

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus #VOLUMEN DONDE PROMETHEUS VA A GUARDAR LAS METRICAS QUE RECOLECTA
    ports:
      - "9090:9090"
    command: #LE PASAMOS LOS PARAMETROS DE CONFIGURACION A PROMETHEUS
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=1y'
      - '--web.enable-lifecycle'
    networks:
      - red_p2p

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_INSTALL_PLUGINS=agenty-flowcharting-panel
      - GF_PANELS_ENABLE_ALPHA=true
      - GF_PANELS_DISABLE_SANITIZE_HTML=true
      - GF_FEATURE_TOGGLES_ENABLE=customJS,customPanels,customVisualitzation
    volumes:
      - grafana-data:/var/lib/grafana #MONTA EL VOLUMEN CREADO ANTES EN LA RUTA DONDE GRAFANA GUARDA SU INFO
    networks:
      - red_p2p

networks:
  red_p2p:
    driver: bridge