services: 

  # Gateway : es el punto de entrada al sistema (acceso de la red a otra red. Internet por ejemplo)
  gateway-01:
    image: nginx:alpine # la imagen base es el servidor web Nginx con la version alpine linux
    container_name: Gateway-01
    ports: 
      - "8085:80" # puerto de mi maquina host (mi pc donde corro dockers) : el puerto del contenedor
      # explicacion: todo lo que llegue a mi puerto 8080 lo rediriges al puero 80 del contenedor.
    networks:
      - blast_net
    restart: always
  
  # auth : servicio de auntentificacion para apps por ejemplo (en python)
  auth-01:
    image: python:3.11-slim # imagen de pytohn con version 3.11 y la variante ligera
    container_name: Auth-01
    # este comando le dice al contenedor que ejecutar al arrancar, instala flask escuchando en el puerto 5000
    command: sh -c "pip install flask && python -m flask run --host=0.0.0.0 --port=5000" 
    networks:
      - blast_net
    restart: always

  # Base de datos - 01 
  db-01:
    image: postgres:15 # imagen de PostfreSQL (sistema de base de datos relacionaeles ) y 15 es la version 
    container_name: DB-01
    environment: 
      POSTGRES_USER: admin # crea usr llamdo admin, le pone contra y crea base de datos llamad amin_db
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: main_db
    volumes: # aqui se guarda la persistencia de datos 
      - db01_data:/var/lib/postgresql/data #ruta dentro del contenedor donde PostgreSQL guarda los archivos
        #todo lo que se guarde en /var/lib/postgresql/data dentro del contenedor se copiará en el volumen db01_data de tu host
    networks:
      - blast_net
    restart: always

  # Base de datos secundaria 
  db-02:
    image: postgres:15
    container_name: DB-02
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: replica_db
    volumes:
      - db02_data:/var/lib/postgresql/data
    networks:
      - blast_net
    restart: always

  # Backup : almacenamiento de copias de seguridad
  backup-01:
    image: alpine # imagen de linux ultraligera, backup solo tiene que ejecutar un bucle
    container_name: Backup-01
    depends_on: # este contedor no se levantara hasta que los que dependan de el esten en marcha 
      - db-01 # concepto interesante para el blast radius no ? si se caen los otros dos este no ira
      - storage-01 # para no tener errores de que no esta levantado , usar scripts "wait-for-it"
    # este comando abre un shell, ejecuta un bucle infinito , dumpea en db1 y lo guarda en la direccion espera 30 segundos
    # se tendra que cambiar por un script real que se conecte a las bd y cada x tiempo ejecute 
    # un comando de backup y lo guarde (copie las bd) en un volumnen o al nodo de storage basicamente
    command: sh -c "while true; do pg_dump -h db-01 -U admin -d main_db > /mnt/storage/backup.sql; echo 'Backup saved'; sleep 30; done"
    volumes: # este sera el volumen donde se guardaran los datos cada x tiempo 
      - storage_data:/mnt/storage
    networks:
      - blast_net
    restart: always

  # Storage: nodo de almacenamiento generico
  storage-01:
    image: alpine 
    container_name: Storage-01
    # aqui se tendra que poner un script que copie los datos de las bd aqui para tener un "disco" central 
    command: sh -c "while true; do echo 'Storage node active'; sleep 30; done"
    volumes: 
      - storage_data:/mnt/storage
    networks:
      - blast_net
    restart: always

  # Cache: Redis (reds es un almecenamiento de memoria RAM), guarda datos temporalmente en memoria
  # Ideal para datos que se consultan mucho pero cambian poco (ejemplo: sesiones de usuario, tokens, resultados de consultas)
  cache-01: # utilizado por pp-01, app-02, app-03, app-04 para guardar y leer información temporal 
            #sin tener que consultar constantemente la base de datos
    image: redis:7 
    container_name: Cache-01
    networks:
      - blast_net
    restart: always

  # Aplicaciones (app-01, app-02, app-03, app-04)
  app-01:
    image: python:3.11-slim
    container_name: App-01
    # este comando escribe en la terminal cada 10 segundos algo (inutil)
    # mas adelante lo que hay que hacer es un script que_
    # - Reciba peticiones (del gateway o de la web) : llamadas HTTP , a la app le llega una peticion de 
    # getaway o lb (ej /get-user/123) i decide si consultar la cache o bb guardando los logs en 
    # monitor y debuelve al gateway la respuesta ej el usuario 123 se llama walter
    # - Guardar o leer datos de db01 
    # - Usar la cahce para hacer consultas 
    # - Mandar metricas al nodo monitor 
    command: sh -c "while true; do echo 'App 01 running'; sleep 10; done"
    networks:
      - blast_net
    restart: always

  app-02:
    image: python:3.11-slim
    container_name: App-02
    command: sh -c "while true; do echo 'App 02 running'; sleep 10; done"
    networks:
      - blast_net
    restart: always

  app-03:
    image: python:3.11-slim
    container_name: App-03
    command: sh -c "while true; do echo 'App 03 running'; sleep 10; done"
    networks:
      - blast_net
    restart: always

  app-04:
    image: python:3.11-slim
    container_name: App-04
    command: sh -c "while true; do echo 'App 04 running'; sleep 10; done"
    networks:
      - blast_net
    restart: always

  # Web servers
  # tendra que entregar contenido directamente del ususario y reenviar peticiones hacia las apps
  # config de nginx.conf donde: decidir donde enviar el trafico dinamico hacer algun index.html 
  # para mostar algo simple pero no haria falta mostrar nada solo que haya trafico 
  web-01:
    image: nginx:alpine
    container_name: Web-01
    networks:
      - blast_net
    restart: always

  web-02:
    image: nginx:alpine
    container_name: Web-02
    networks:
      - blast_net
    restart: always
  
  # Load Balancer 
  lb-01:
  # server http/https , con figurar nginx.conf donde le dire a que contendor enviar solicitudes
  # habra que ponerle puertos,  y volumenes ? 
    image: nginx:alpine
    container_name: Lb-01
    networks:
      - blast_net
    restart: always

  # Monitor (Prometheus)
  monitor-01:
    image: prom/prometheus # monitorizacion y recopilacion de metrcas
    # prometheus puede
    # Recoger métricas de otros servicios (contenedores, servidores, bases de datos…).
    # Almacenarlas en su propia base de datos de series temporales.
    # Permitir consultas y alertas sobre esas métricas mediante su lenguaje de consulta llamado PromQL.
    # Exponer un panel web donde puedes ver gráficos y estados de los servicios.
    container_name: Monitor-01
    ports:
      - "9090:9090"
    networks:
      - blast_net
    restart: always

# Red (aqui solo una)
networks:
  blast_net:
    external: true # asegurarse de que ha una red creada llamad blasat_net con el comano docker network ls 

volumes: 
  db01_data:
  db02_data:
  # backup_data:
  storage_data:
