# ------------------------------------------
# Formato de conexión entre nodos (Topología)
# ------------------------------------------
#
# Cada servicio representa un nodo que puede comunicarse con otros mediante TCP.
#
# Variables de entorno por nodo:
#
# - PORT: Puerto en el que escucha el nodo (debe ser el mismo en todos si se quiere comunicación uniforme)
#
# - PEERS: Lista de vecinos físicos (nodos directamente conectados). Formato:
#          nombre_nodo:puerto,nombre_nodo:puerto,...
#
# - DESTINOS: Lista de nombres de nodos destino a los que este nodo enviará tráfico periódicamente.
#             Formato: nombre_destino1,nombre_destino2,...
#
# - ROUTES: Tabla de enrutamiento estática, indicando por dónde salir para alcanzar un destino específico.
#           Formato: destino:nombre_vecino:puerto
#           Ejemplo: node9:node5:5000  → Para llegar a node9, enviar mensaje vía node5:5000
#
# El script `app.py` debe implementarse para manejar esta lógica de routing
# y comunicación entre nodos usando sockets TCP y JSON como protocolo de mensajes.
#
# Los volúmenes montan el script `app.py` dentro del contenedor para que todos los nodos lo utilicen.
#
# Todos los nodos comparten la misma imagen `app_pae`, diferenciándose solo por configuración.
#
# ------------------------------------------

services:
  node1:
    build: .
    hostname: node1
    environment:
      - PORT=5000
      - PEERS=node2:5000
      - DESTINOS=node8
      - ROUTES=
    volumes:
      - ./app.py:/app/app.py

  node2:
    build: .
    hostname: node2
    environment:
      - PORT=5000
      - PEERS=node1:5000,node4:5000,node6:5000,node5:5000,node10:5000
      - DESTINOS=node7
      - ROUTES=node3:node4:5000,node8:node6:5000,node9:node5:5000,node7:node6:5000
    volumes:
      - ./app.py:/app/app.py

  node3:
    build: .
    hostname: node3
    environment:
      - PORT=5000
      - PEERS=node4:5000,node6:5000
      - DESTINOS=
      - ROUTES=
    volumes:
      - ./app.py:/app/app.py

  node4:
    build: .
    hostname: node4
    environment:
      - PORT=5000
      - PEERS=node3:5000,node2:5000
      - DESTINOS=
      - ROUTES=
    volumes:
      - ./app.py:/app/app.py

  node5:
    build: .
    hostname: node5
    environment:
      - PORT=5000
      - PEERS=node2:5000,node9:5000,node6:5000
      - DESTINOS=
      - ROUTES=node10:node9:5000,node1:node2:5000,node4:node2:5000,node3:node6:5000,node7:node9:5000,node8:node6:5000
    volumes:
      - ./app.py:/app/app.py

  node6:
    build: .
    hostname: node6
    environment:
      - PORT=5000
      - PEERS=node2:5000,node3:5000,node5:5000,node7:5000,node8:5000
      - DESTINOS=
      - ROUTES=node9:node5:5000,node10:node2:5000,node1:node2:5000,node4:node3:5000
    volumes:
      - ./app.py:/app/app.py

  node7:
    build: .
    hostname: node7
    environment:
      - PORT=5000
      - PEERS=node6:5000,node8:5000,node9:5000
      - DESTINOS=
      - ROUTES=node1:node6:5000,node2:node6:5000,node3:node6:5000,node4:node6:5000,node5:node9:5000,node10:node9:5000
    volumes:
      - ./app.py:/app/app.py

  node8:
    build: .
    hostname: node8
    environment:
      - PORT=5000
      - PEERS=node7:5000,node6:5000
      - DESTINOS=
      - ROUTES=
    volumes:
      - ./app.py:/app/app.py

  node9:
    build: .
    hostname: node9
    environment:
      - PORT=5000
      - PEERS=node10:5000,node5:5000,node7:5000
      - DESTINOS=node4
      - ROUTES=node1:node10:5000,node2:node5:5000,node3:node5:5000,node4:node5:5000,node6:node7:5000,node8:node7:5000
    volumes:
      - ./app.py:/app/app.py

  node10:
    build: .
    hostname: node10
    environment:
      - PORT=5000
      - PEERS=node2:5000,node9:5000
      - DESTINOS=
      - ROUTES=
    volumes:
      - ./app.py:/app/app.py
