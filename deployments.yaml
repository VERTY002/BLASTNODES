apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-state-metrics-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-state-metrics-cr
rules:
- apiGroups: [""]
  resources:
  - pods
  - nodes
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - namespaces
  - endpoints
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-state-metrics-crb
subjects:
- kind: ServiceAccount
  name: kube-state-metrics-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: kube-state-metrics-cr
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-cluster-role
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - nodes/metrics
  - nodes/stats
  - nodes/spec
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- nonResourceURLs:
  - "/metrics"
  - "/metrics/cadvisor" # <-- Permiso clave para el Kubelet
  - "/metrics/resource" # <-- Permiso clave para el Kubelet
  - "/metrics/probes"   # <-- Permiso clave para el Kubelet
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-cluster-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-cluster-role
subjects:
  - kind: ServiceAccount
    name: prometheus-sa
    namespace: default
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          # Mantiene solo los pods que tienen una anotación para ser scrapeados
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          # Usa el nombre del namespace y del pod como etiquetas
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_pod_name]
            separator: '/'
            target_label: job
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod

      - job_name: 'kubernetes-cadvisor'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            source_labels: [__meta_kubernetes_node_address_InternalIP]
            replacement: ${1}:10250
          # --- LÍNEA CORREGIDA Y AÑADIDA ---
          # Esta línea faltaba. Le dice a Prometheus que vaya a /metrics/cadvisor
          - source_labels: [__meta_kubernetes_node_name]
            target_label: __metrics_path__
            replacement: /metrics/cadvisor
        

      - job_name: 'kubernetes-node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_label_app]
            action: keep
            regex: node-exporter

      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics-svc:8080']
      
      # El job de 'blackbox' también ha sido corregido en su indentación
      - job_name: 'blackbox'
        metrics_path: /probe
        params:
          module: [tcp_connect]
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: node[0-9]+
          - source_labels: [__address__]
            target_label: __param_target
          - source_labels: [__param_target]
            target_label: instance
          - target_label: __address__
            replacement: blackbox-exporter:9115
---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  labels:
    app: node-exporter
spec:
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
      labels:
        app: node-exporter
    spec:
      containers:
      - name: node-exporter
        image: prom/node-exporter:v1.8.1
        ports:
        - containerPort: 9100
          name: metrics

---

apiVersion: apps/v1
kind: Deployment # Clase de objeto: un controlador que asegura N réplicas de un Pod.
metadata:
  name: node1 # Nombre del Deployment (y base del ReplicaSet que creará).
spec:
  replicas: 1 # Nº de Pods deseados. Aquí 1 para identidad estable por Service.
  selector: { matchLabels: { app: node1 } } # Cómo identifica el Deployment qué Pods le pertenecen . app:node 1 # -> Debe coincidir EXACTAMENTE con template.metadata.labels.
  template:  # Plantilla del Pod que gestionará este Deployment.
    metadata: { labels: { app: node1 } }
    spec:
      containers: # Lista de contenedores dentro del Pod.
        - name: node1 # Nombre lógico del contenedor (visible en logs, etc.).
          image: verty002/blast-nodes:v5 # Imagen del contenedor (cámbiala por la tuya subida al registry).
          imagePullPolicy: IfNotPresent # Tira de la imagen sólo si no existe en el nodo (evita pulls cada vez).
          ports: [{ containerPort: 5000 }] # Puerto que tu proceso escucha dentro del contenedor (informativo para K8s/NPs).
          env:
            - { name: SELF_NAME, value: "node1" }
            - { name: PORT, value: "5000" }
            - { name: PEERS, value: "node2:5000" }
            - { name: DESTINOS, value: "node8" }
            - { name: ROUTES, value: "" }
            - { name: CONNECT_TIMEOUT, value: "5" }
            - { name: CLIENT_INTERVAL, value: "5" }
            - { name: CLIENT_JITTER, value: "1.0" }
            - { name: BACKOFF_BASE, value: "1.0" }
            - { name: BACKOFF_MAX, value: "10.0" }
            - { name: RETRIES_DIRECT, value: "1" }
            - { name: RETRIES_ROUTE, value: "1" }
            - { name: RETRIES_BROAD, value: "0" }
            - { name: IDLE_SLEEP, value: "1.0" }
          readinessProbe: # Comprobación de “listo para recibir tráfico”.
            tcpSocket: { port: 5000 } # K8s hace un TCP connect al 5000 dentro del contenedor.
            initialDelaySeconds: 3 # Espera 3s tras arrancar antes de la 1ª prueba (deja calentar tu app).
            periodSeconds: 5 # Repite la comprobación cada 5s.

---
#las --- son para separa los nodos sino pilla el del final el node10          
apiVersion: apps/v1
kind: Deployment 
metadata:
  name: node2
spec:
  replicas: 1
  selector: { matchLabels: { app: node2 } }
  template:
    metadata: { labels: { app: node2 } }
    spec:
      containers:
        - name: node2
          image: verty002/blast-nodes:v5
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 5000 }]
          env:
            - { name: SELF_NAME, value: "node2" }
            - { name: PORT, value: "5000" }
            - { name: PEERS, value: "node1:5000,node4:5000,node6:5000,node5:5000,node10:5000" }
            - { name: DESTINOS, value: "node7" }
            - { name: ROUTES, value: "node3:node4:5000,node8:node6:5000,node9:node5:5000,node7:node6:5000" }

            - { name: CONNECT_TIMEOUT, value: "5" }
            - { name: CLIENT_INTERVAL, value: "5" }
            - { name: CLIENT_JITTER, value: "1.0" }
            - { name: BACKOFF_BASE, value: "1.0" }
            - { name: BACKOFF_MAX, value: "10.0" }
            - { name: RETRIES_DIRECT, value: "1" }
            - { name: RETRIES_ROUTE, value: "1" }
            - { name: RETRIES_BROAD, value: "0" }
            - { name: IDLE_SLEEP, value: "1.0" }

          readinessProbe:
            tcpSocket: { port: 5000 }
            initialDelaySeconds: 3
            periodSeconds: 5
         
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: node3
spec:
  replicas: 1
  selector: { matchLabels: { app: node3 } }
  template:
    metadata: { labels: { app: node3 } }
    spec:
      containers:
        - name: node3
          image: verty002/blast-nodes:v5
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 5000 }]
          env:
            - { name: SELF_NAME, value: "node3" }
            - { name: PORT, value: "5000" }
            - { name: PEERS, value: "node4:5000,node6:5000" }
            - { name: DESTINOS, value: "" }
            - { name: ROUTES, value: "" }

            - { name: CONNECT_TIMEOUT, value: "5" }
            - { name: CLIENT_INTERVAL, value: "5" }
            - { name: CLIENT_JITTER, value: "1.0" }
            - { name: BACKOFF_BASE, value: "1.0" }
            - { name: BACKOFF_MAX, value: "10.0" }
            - { name: RETRIES_DIRECT, value: "1" }
            - { name: RETRIES_ROUTE, value: "1" }
            - { name: RETRIES_BROAD, value: "0" }
            - { name: IDLE_SLEEP, value: "1.0" }

          readinessProbe:
            tcpSocket: { port: 5000 }
            initialDelaySeconds: 3
            periodSeconds: 5

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: node4
spec:
  replicas: 1
  selector: { matchLabels: { app: node4 } }
  template:
    metadata: { labels: { app: node4 } }
    spec:
      containers:
        - name: node4
          image: verty002/blast-nodes:v5
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 5000 }]
          env:
            - { name: SELF_NAME, value: "node4" }
            - { name: PORT, value: "5000" }
            - { name: PEERS, value: "node3:5000,node2:5000" }
            - { name: DESTINOS, value: "" }
            - { name: ROUTES, value: "" }

            - { name: CONNECT_TIMEOUT, value: "5" }
            - { name: CLIENT_INTERVAL, value: "5" }
            - { name: CLIENT_JITTER, value: "1.0" }
            - { name: BACKOFF_BASE, value: "1.0" }
            - { name: BACKOFF_MAX, value: "10.0" }
            - { name: RETRIES_DIRECT, value: "1" }
            - { name: RETRIES_ROUTE, value: "1" }
            - { name: RETRIES_BROAD, value: "0" }
            - { name: IDLE_SLEEP, value: "1.0" }
          
          readinessProbe:
            tcpSocket: { port: 5000 }
            initialDelaySeconds: 3
            periodSeconds: 5

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: node5
spec:
  replicas: 1
  selector: { matchLabels: { app: node5 } }
  template:
    metadata: { labels: { app: node5 } }
    spec:
      containers:
        - name: node5
          image: verty002/blast-nodes:v5
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 5000 }]
          env:
            - { name: SELF_NAME, value: "node5" }
            - { name: PORT, value: "5000" }
            - { name: PEERS, value: "node2:5000,node9:5000,node6:5000" }
            - { name: DESTINOS, value: "" }
            - { name: ROUTES, value: "node10:node9:5000,node1:node2:5000,node4:node2:5000,node3:node6:5000,node7:node9:5000,node8:node6:5000" }

            - { name: CONNECT_TIMEOUT, value: "5" }
            - { name: CLIENT_INTERVAL, value: "5" }
            - { name: CLIENT_JITTER, value: "1.0" }
            - { name: BACKOFF_BASE, value: "1.0" }
            - { name: BACKOFF_MAX, value: "10.0" }
            - { name: RETRIES_DIRECT, value: "1" }
            - { name: RETRIES_ROUTE, value: "1" }
            - { name: RETRIES_BROAD, value: "0" }
            - { name: IDLE_SLEEP, value: "1.0" }

          readinessProbe:
            tcpSocket: { port: 5000 }
            initialDelaySeconds: 3
            periodSeconds: 5

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: node6
spec:
  replicas: 1
  selector: { matchLabels: { app: node6 } }
  template:
    metadata: { labels: { app: node6 } }
    spec:
      containers:
        - name: node6
          image: verty002/blast-nodes:v5
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 5000 }]
          env:
            - { name: SELF_NAME, value: "node6" }
            - { name: PORT, value: "5000" }
            - { name: PEERS, value: "node2:5000,node3:5000,node5:5000,node7:5000,node8:5000" }
            - { name: DESTINOS, value: "" }
            - { name: ROUTES, value: "node9:node5:5000,node10:node2:5000,node1:node2:5000,node4:node3:5000" }

            - { name: CONNECT_TIMEOUT, value: "5" }
            - { name: CLIENT_INTERVAL, value: "5" }
            - { name: CLIENT_JITTER, value: "1.0" }
            - { name: BACKOFF_BASE, value: "1.0" }
            - { name: BACKOFF_MAX, value: "10.0" }
            - { name: RETRIES_DIRECT, value: "1" }
            - { name: RETRIES_ROUTE, value: "1" }
            - { name: RETRIES_BROAD, value: "0" }
            - { name: IDLE_SLEEP, value: "1.0" }

          readinessProbe:
            tcpSocket: { port: 5000 }
            initialDelaySeconds: 3
            periodSeconds: 5

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: node7
spec:
  replicas: 1
  selector: { matchLabels: { app: node7 } }
  template:
    metadata: { labels: { app: node7 } }
    spec:
      containers:
        - name: node7
          image: verty002/blast-nodes:v5
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 5000 }]
          env:
            - { name: SELF_NAME, value: "node7" }
            - { name: PORT, value: "5000" }
            - { name: PEERS, value: "node6:5000,node8:5000,node9:5000" }
            - { name: DESTINOS, value: "" }
            - { name: ROUTES, value: "node1:node6:5000,node2:node6:5000,node3:node6:5000,node4:node6:5000,node5:node9:5000,node10:node9:5000" }

            - { name: CONNECT_TIMEOUT, value: "5" }
            - { name: CLIENT_INTERVAL, value: "5" }
            - { name: CLIENT_JITTER, value: "1.0" }
            - { name: BACKOFF_BASE, value: "1.0" }
            - { name: BACKOFF_MAX, value: "10.0" }
            - { name: RETRIES_DIRECT, value: "1" }
            - { name: RETRIES_ROUTE, value: "1" }
            - { name: RETRIES_BROAD, value: "0" }
            - { name: IDLE_SLEEP, value: "1.0" }

          readinessProbe:
            tcpSocket: { port: 5000 }
            initialDelaySeconds: 3
            periodSeconds: 5

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: node8
spec:
  replicas: 1
  selector: { matchLabels: { app: node8 } }
  template:
    metadata: { labels: { app: node8 } }
    spec:
      containers:
        - name: node8
          image: verty002/blast-nodes:v5
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 5000 }]
          env:
            - { name: SELF_NAME, value: "node8" }
            - { name: PORT, value: "5000" }
            - { name: PEERS, value: "node7:5000,node6:5000" }
            - { name: DESTINOS, value: "" }
            - { name: ROUTES, value: "" }

            - { name: CONNECT_TIMEOUT, value: "5" }
            - { name: CLIENT_INTERVAL, value: "5" }
            - { name: CLIENT_JITTER, value: "1.0" }
            - { name: BACKOFF_BASE, value: "1.0" }
            - { name: BACKOFF_MAX, value: "10.0" }
            - { name: RETRIES_DIRECT, value: "1" }
            - { name: RETRIES_ROUTE, value: "1" }
            - { name: RETRIES_BROAD, value: "0" }
            - { name: IDLE_SLEEP, value: "1.0" }

          readinessProbe:
            tcpSocket: { port: 5000 }
            initialDelaySeconds: 3
            periodSeconds: 5

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: node9
spec:
  replicas: 1
  selector: { matchLabels: { app: node9 } }
  template:
    metadata: { labels: { app: node9 } }
    spec:
      containers:
        - name: node9
          image: verty002/blast-nodes:v5
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 5000 }]
          env:
            - { name: SELF_NAME, value: "node9" }
            - { name: PORT, value: "5000" }
            - { name: PEERS, value: "node10:5000,node5:5000,node7:5000" }
            - { name: DESTINOS, value: "node4" }
            - { name: ROUTES, value: "node1:node10:5000,node2:node5:5000,node3:node5:5000,node4:node5:5000,node6:node7:5000,node8:node7:5000" }

            - { name: CONNECT_TIMEOUT, value: "5" }
            - { name: CLIENT_INTERVAL, value: "5" }
            - { name: CLIENT_JITTER, value: "1.0" }
            - { name: BACKOFF_BASE, value: "1.0" }
            - { name: BACKOFF_MAX, value: "10.0" }
            - { name: RETRIES_DIRECT, value: "1" }
            - { name: RETRIES_ROUTE, value: "1" }
            - { name: RETRIES_BROAD, value: "0" }
            - { name: IDLE_SLEEP, value: "1.0" }

          readinessProbe:
            tcpSocket: { port: 5000 }
            initialDelaySeconds: 3
            periodSeconds: 5

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: node10
spec:
  replicas: 1
  selector: { matchLabels: { app: node10 } }
  template:
    metadata: { labels: { app: node10 } }
    spec:
      containers:
        - name: node10
          image: verty002/blast-nodes:v5
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 5000 }]
          env:
            - { name: SELF_NAME, value: "node10" }
            - { name: PORT, value: "5000" }
            - { name: PEERS, value: "node2:5000,node9:5000" }
            - { name: DESTINOS, value: "" }
            - { name: ROUTES, value: "" }

            - { name: CONNECT_TIMEOUT, value: "5" }
            - { name: CLIENT_INTERVAL, value: "5" }
            - { name: CLIENT_JITTER, value: "1.0" }
            - { name: BACKOFF_BASE, value: "1.0" }
            - { name: BACKOFF_MAX, value: "10.0" }
            - { name: RETRIES_DIRECT, value: "1" }
            - { name: RETRIES_ROUTE, value: "1" }
            - { name: RETRIES_BROAD, value: "0" }
            - { name: IDLE_SLEEP, value: "1.0" }

          readinessProbe:
            tcpSocket: { port: 5000 }
            initialDelaySeconds: 3
            periodSeconds: 5

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus-sa  # <- aquí va el service account
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blackbox-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blackbox-exporter
  template:
    metadata:
      labels:
        app: blackbox-exporter
    spec:
      containers:
        - name: blackbox-exporter
          image: prom/blackbox-exporter:latest
          ports:
            - containerPort: 9115

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-state-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-state-metrics
  template:
    metadata:
      labels:
        app: kube-state-metrics
    spec:
      serviceAccountName: kube-state-metrics-sa 
      containers:
      - name: kube-state-metrics
        image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.17.0 # Usa una versión reciente y estable
        ports:
        - containerPort: 8080
          name: metrics

## Paso 1: CRDs
#helm install linkerd-crds linkerd/linkerd-crds -n linkerd --create-namespace

# Paso 2: Plano de Control (con los certificados generados automáticamente)
#helm install linkerd-control-plane linkerd/linkerd-control-plane -n linkerd --set identity.issuer.scheme=kubernetes.io/legacy-unknown

# Paso 3: Visualización
#helm install linkerd-viz linkerd/linkerd-viz -n linkerd-viz --create-namespace
