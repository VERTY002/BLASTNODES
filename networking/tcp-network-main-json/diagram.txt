                        ┌────────────────────────────────────────┐
                        │          VARIABLES DE ENTORNO          │
                        │----------------------------------------│
                        │ PEERS="nodoA:5001,nodoB:5002"          │
                        │ DESTINOS="nodoB,nodoC"                 │
                        │ ROUTES="nodoC:nodoB:5002"              │
                        └────────────────────────────────────────┘
                                        │
                                        ▼
                           ┌─────────────────────────┐
                           │          main()         │
                           │------------------------ │
                           │  1. parse_peers()       │
                           │  2. parse_routes()      │
                           │  3. parse_destinations()│
                           │  4. Crear Node(...)     │
                           │  5. Lanzar hilos        │
                           └──────────┬──────────────┘
                                      │
          ┌───────────────────────────┼─────────────────────────────┐
          │                           │                             │
          ▼                           ▼                             ▼
┌───────────────────────┐   ┌───────────────────────┐   ┌──────────────────────┐
│     HILO SERVIDOR     │   │     HILO CLIENTE      │   │    HILO PRINCIPAL    │
│ (node.start_server)   │   │ (node.start_client)   │   │ (mantiene el bucle)  │
├───────────────────────┤   ├───────────────────────┤   ├──────────────────────┤
│ Escucha en puerto     │   │ Cada MESSAGE_INTERVAL │   │ time.sleep(1)        │
│ aceptando conexiones  │   │ envía mensajes a cada │   │ mantiene vivo el nodo│
│ TCP entrantes         │   │ destino configurado   │   │                      │
└──────────┬────────────┘   └──────────┬────────────┘   └──────────────────────┘
           │                           │
           │                           │
           ▼                           ▼
 ┌────────────────────────┐    ┌────────────────────────────┐
 │ _handle_connection()   │    │ forward_message(msg)       │
 │------------------------│    │----------------------------│
 │ 1. Recibe JSON         │    │ 1️. Intento directo (peers) │
 │ 2. Si destino == yo    │    │ 2️. Usa tabla de rutas      │
 │    → log_json(received)│    │ 3️. Reenvío alternativo     │
 │ 3. Si no, reenviar     │    │ (aprendizaje dinámico)     │
 │    → forward_message() │    └──────────┬─────────────────┘
 └────────────────────────┘               │
                                          ▼
                           ┌──────────────────────────────────┐
                           │ _send_to_peer(peer, msg, event)  │
                           │----------------------------------│
                           │ - Crea conexión TCP              │
                           │ - Envía JSON codificado          │
                           │ - Genera log_json("INFO")        │
                           │ - Devuelve éxito/fracaso         │
                           └──────────────────────────────────┘
                                          │
                                          ▼
                           ┌────────────────────────────────────┐
                           │ _handle_reroute(msg, exclude, dest)│
                           │------------------------------------│
                           │ - Prueba otros peers               │
                           │ - Si funciona → actualiza routes[] │
                           │ - Si no → log_json("no_route")     │
                           └────────────────────────────────────┘